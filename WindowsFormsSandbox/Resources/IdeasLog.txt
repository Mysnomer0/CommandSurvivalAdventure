-- 8/29/2018

Preparing to revamp the parser.  This is definately a very key piece of the game, so this needs to be good and work well.
The way I see this working is that every command has basic format:

craft/make <object> from/with/using <object> and <object> ...

fasten/attach <object> to <object> with/using <object>



-- 8/23/2018 

Working on being able to manipulate objects.  
Kaylek helped implement coloring for words, only for me to realize just how delicate and disfunctional my current setup I/O classes are.
I'm going to redo a lot of how my I/O classes work together, mostly in how they clear the screen.  
I've got some ideas for taking the string to print and breaking it up at the colored words and the new line characters.
The output class will output all the words up to the colored word, change the colors and output the colord word, and once it hits a newline character, add a bunch of spaces until we reach the end of the screen.  
Then, repeat for the new line.

-- 8/17/2018

Implemented what I was talking about, where there is a big gameObject dictionary on the world that given the ID, you can retrieve any gameObject in the world, including chunks.
Whenever a child is added to a gameObject, it is also added to it's root, which should always be a world.
The world has a special AddChild() function that also adds the gameObject to the big dictionary.

-- 8/15/2018

Decided to go with an ID system for every game object, so it's eaiser to keep track of them.
Right now, there can be tons of game objects all with the same name, like a bunch of grass.
With an ID system, it'd be much easier to keep track of individual objects.
The new class will be call IdentificationManager, and has one function to generate an ID.
The world stores an instance of one of these, and any gameObjects being put on the world generate an ID through it.

-- 8/14/2018 - Milan

Went with the MQTT setup, seemed more clean, and hey, I already had working code for it.
You can now walk around in the world, and each chunk will be described as you enter.
The descriptions are fairly limited, but it's working.
I realized something though, and I think I need to take a step back not to forget how this game is supposed to succeed.

A graphics can describe a world a whole lot better than words do, so why just stick with words to let the player "see" the world?

The reason is simple: graphics let you see, but words are a lot more flexible.  Words can describe sounds, smells, textures, anything that applies to any of the senses.
The hope is that the immersion will be cranked way up, as you aren't just seeing the world on the screen, you're imagining it, and in way more depth.
Every sense is being described to you.
Letting the player imagine the game is so much better on multiple levels, one of the best being that any holes in the picture in the players mind are filled in if a good enough picture is given.


-- 8/8/2018 - Milan

Quite a bit has happened, the biggest change being that the World namespace has been created, holding things like the base GameObject, Creature, Mineral, etc.
I'm also thinking that I'll need to change the NetworkingManger class again to a REST API sort of structure.
Everyone on a network will have a HTTP listener, and be able to transfer JSON files between them.
While the MQTT structure is nice, it doesn't seem to be quite as flexible.
I'm not sure, I guess I'll have to decide. 
I now know how the REST API framework would work, but I'm not sure if it's a better way to go.
It's definately a more organized and reliable setup.

-- 7/18/2018 - Milan

So, I'm running into a problem with a collision in terminology with the networking.
There are two kinds of commands, commands that you input into the program, and commands that are pieces of code that you send to the server.
I'm thinking of just renaming the server command class to just being ServerCommands, but just so that I've logged it here that there is a difference.
Command and ServerCommand are very different.

-- 7/16/2018 - Milan

It looks like I need to make a new class called RPC.
RPC, or Remote Procedual Call(I didn't make that up, it's a technical networking term), is essentially code on your machine that is called remotely.
In this case, some commands will need to send the server a RPC.
Each RPC will have a Run() function that will get called once it is recieved.
In this way, you can send code to get run on a server or client.

-- 7/14/2018 - Milan and Kaylek

There will be 3 different kinds of commands, client commands, server commands, and system commands.
Each command has a command type attached to it.
Client commands are the normal ones, generally requesting something from the server.
Server commands are pretty much exclusively run on a server, generally accepting a message, processing, and handing back data.
System commands would do things like look at local files, check server ping and connectivity, etc.

Open source the game to allow for other people to add their own plants, creatures, and minerals.

-- 7/13/2018

Two new classes will need to be added to help with networking: Server and Client.
The Server class contains everything needed to run a CSA server.
It can connect up to an MQTT broker and generate a world file for itself.
Once up, it can begin listening for commands from Client instances.

I've finall got a solution for the async input and output.
Input is being read in constantly, using Console.ReadKey, so that it doesn't get echoed to the screen.
The Input class will manually echo the input to the screen.
The program can output as it normally would, when ever it wants.
If the user is in the middle of typing when something is outputted, say, got a new notification, Output tells Input to refresh the input that is echoed to the screen.
Something like this:

A muscular man is approaching.
> draw swo
The muscular man draws his sword.
> draw sword